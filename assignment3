"""
DNA sequencing assignment using for loops + indexing/slicing and if statements

"""

def get_length(dna):
    """ (str) -> int

    Return the length of the DNA sequence dna.

    >>> get_length('ATCGAT')
    6
    >>> get_length('ATCG')
    4
    """
    return(len(dna))

def is_longer(dna1, dna2):
    """ (str, str) -> bool

    Return True if and only if DNA sequence dna1 is longer than DNA sequence
    dna2.

    >>> is_longer('ATCG', 'AT')
    True
    >>> is_longer('ATCG', 'ATCGGA')
    False
    """
    return dna1>dna2


def count_nucleotides(dna, nucleotide):
    """ (str, str) -> int

    Return the number of occurrences of nucleotide in the DNA sequence dna.

    >>> count_nucleotides('ATCGGC', 'G')
    2
    >>> count_nucleotides('ATCTA', 'G')
    0
    """
    counter = 0
    for i in dna:
        if i == nucleotide:
            counter = counter + 1
    return counter


def contains_sequence(dna1, dna2):
    """ (str, str) -> bool

    Return True if and only if DNA sequence dna2 occurs in the DNA sequence
    dna1.

    >>> contains_sequence('ATCGGC', 'GG')
    True
    >>> contains_sequence('ATCGGC', 'GT')
    False

    """
    return dna2 in dna1

def is_valid_sequence(dna):
    """ (str) -> bool

    Return True if and only if DNA sequence only contains 'A', 'T, 'C', 'G' in
    the sequence of dna

    >>> is_valid_sequence('CATGACTGATGC')
    True
    >>> is_valid_sequence('ABOFNOLTRENJ')
    False

    """
    for i in dna:
        counter = 0
        if i == 'T':
            counter = 1
        elif i == 'C':
            counter = 1
        elif i == 'A':
            counter = 1
        elif i == 'G':
            counter = 1
        if counter == 0:
            return False
    return True

def insert_sequence(dna1, dna2, index):
    """ (str, str, int) -> str

    Return new DNA sequence after inserting the second DNA sequence into the
    first DNA sequence

    >>> insert_sequence('CCGG, 'AT', 2)
    'CCATGG'
    """
    newDNA = dna1[:index] + dna2 + dna1[index:]
    return newDNA
def get_complement(dna):
    """ (str) -> str

    Return nucleotide complement

    >>> get_complement('A')
    T
    """
    dna2 = ''
    for i in dna:
        if i == 'T':
            dna2 += 'A'
        elif i == 'C':
            dna2 += 'G'
        elif i == 'A':
            dna2 += 'T'
        elif i == 'G':
            dna2 += 'C'
    return dna2
        
def get_complementary_sequence(dna):
    """ (str) -> str

    Return new DNa squence with the nucleotide complement

    >>> get_complement('ACGTACG')
    TGCATGC
    """
    dna2 = ''
    for i in dna:
        if i == 'T':
            dna2 += 'A'
        elif i == 'C':
            dna2 += 'G'
        elif i == 'A':
            dna2 += 'T'
        elif i == 'G':
            dna2 += 'C'
    return dna2

